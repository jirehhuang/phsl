% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bnsl.R
\name{bnsl}
\alias{bnsl}
\title{Bayesian network structure learning}
\usage{
bnsl(
  x,
  restrict = "ppc",
  maximize = "tabu",
  restrict.args = list(),
  maximize.args = list(),
  undirected = FALSE,
  path = 1,
  min_alpha = 1e-05,
  hgi = FALSE,
  true_bn = NULL,
  whitelist = NULL,
  blacklist = NULL,
  debug = FALSE
)
}
\arguments{
\item{x}{a data frame containing the variables in the model. Currently, the implementations of pPC, PATH, and HGI only support discrete data.}

\item{restrict}{an argument as in \code{\link[bnlearn]{rsmax2}}, with the following additional options.
\itemize{
\item \code{restrict = "ppc"} for the pPC algorithm (\code{\link{ppc}}).
\item \code{restrict = "true"} with \code{true_bn} supplied to perfectly restrict to the true skeleton.
\item \code{restrict = "cig"} with \code{true_bn} supplied to perfectly restrict to the conditional independence graph (CIG).
\item \code{restrict = ""} for no restriction method (i.e., for score-based methods).
}}

\item{maximize}{an argument as in \code{\link[bnlearn]{rsmax2}}, with the additional option of \code{maximize = ""} for no maximization method (i.e., for constraint-based methods).}

\item{restrict.args}{an argument as in \code{\link[bnlearn]{rsmax2}}, with the addition of the following arguments only applicable to \code{restrict = "ppc"} (\code{\link{ppc}}).
\itemize{
\item \code{max_groups = 20}: a numeric value indicating maximum number of groups to partition into. The PC(-stable) algorithm may be recovered with \code{max_groups = 1}, allowing for the \code{sort_pval} argument.
\item \code{sort_pval = TRUE}: a logical value indicating whether or not to sort the order of the consideration of conditioning sets by the current p-values.
\item \code{max_wthn_sx}: a numeric value indicating the maximum size of considered conditioning sets when estimating edges within clusters.
\item \code{max_btwn_sx}: a numeric value indicating the maximum size of considered conditioning sets when estimating edges between clusters.
\item \code{max_btwn_nbr}: a numeric value indicating the maximum neighborhood size when estimating edges between clusters.
\item \code{maxp}: a numeric value indicating the maximum number of parents for a node, as in \code{\link[bnlearn]{hc}} and \code{\link[bnlearn]{tabu}}. Useful when \code{hgi = TRUE}. Should be less than or equal to \code{maximize.args$maxp}.
}
Additionally, \code{\link{ppc}} only uses \code{test = "mi"} for the clustering step, though subsequent stages of the algorithm can employ different tests.}

\item{maximize.args}{an argument as in \code{\link[bnlearn]{rsmax2}}, with the \code{maxp} argument likewise used constraint-based edge orientation, if applicable. Additionally, the \code{score} argument determines the score used in PATH (\code{score = "pred-loglik"} not supported), and HGI exclusively uses \code{score = "bic"}.}

\item{undirected}{a logical value indicating, for constraint-based algorithms, whether the skeleton should be output without learning edge orientations. Not applicable for hybrid methods, score-based methods, or when \code{path} or \code{hgi} are activated.}

\item{path}{a numeric value indicating the number of solution(s) to be generated by the PATH algorithm. By default, PATH remains deactivated with \code{path = 1}. Only applicable for \code{restrict = "ppc"}.}

\item{min_alpha}{a numeric value between \code{0} and \code{restrict.args$alpha} that indicates the minimum threshold value for the PATH algorithm.}

\item{hgi}{a logical value activating the HGI algorithm for greedy edge orientation. Not applicable if \code{restrict = ""}.}

\item{true_bn}{a \code{bn} object with the true underlying structure of \code{x} to evaluate d-separation tests instead of conditional independence tests. Only applicable for \code{restrict = "ppc"} or \code{restrict = "true"}.}

\item{whitelist, blacklist, debug}{arguments as in \code{\link[bnlearn]{rsmax2}}.}
}
\value{
A Bayesian network as an object of class \code{bn}.
}
\description{
Wrapper function for executing general structure learning algorithms, much like \code{\link[bnlearn]{rsmax2}} from the \code{\link[bnlearn]{bnlearn}} package, with the addition of the partitioned PC (pPC) algorithm, the \eqn{p}-value adjacency thresholding (PATH) algorithm, and the hybrid greedy initialization (HGI) algorithm.
}
\details{
None.
}
\examples{
## Read Bayesian network object 
true_bn <- bnrepository("child")

## Generate data and relevel for simplicity
set.seed(1)
x <- bnlearn::rbn(true_bn, n = 1e4)
x <- as.data.frame(sapply(x, function(x) as.factor(as.integer(x) - 1L)),
                   stringsAsFactors = TRUE)

## pPC with PATH
bn1 <- bnsl(x = x, restrict = "ppc", maximize = "",
            restrict.args = list(alpha = 1e-3, max.sx = 3, sort_pval = TRUE),
            maximize.args = list(maxp = 8), path = 10, min_alpha = 1e-5,
            hgi = FALSE, debug = TRUE)

## pHGS (pPC with PATH, HGI, and greedy search)
bn2 <- bnsl(x = x, restrict = "ppc", maximize = "tabu",
            restrict.args = list(alpha = 1e-3, max.sx = 3, sort_pval = TRUE),
            maximize.args = list(maxp = 8, tabu = 10, max.tabu = 10),
            path = 10, min_alpha = 1e-5, hgi = TRUE, debug = TRUE)

## MMHC with HGI
bn3 <- bnsl(x = x, restrict = "mmpc", maximize = "hc",
            restrict.args = list(alpha = 1e-3, max.sx = 3, sort_pval = TRUE),
            maximize.args = list(maxp = 8), hgi = TRUE, debug = TRUE)
}
\references{
\href{https://doi.org/10.1007/s10994-022-06145-4}{Huang, J., & Zhou, Q. (2022). Partitioned hybrid learning of Bayesian network structures. \emph{Machine Learning}. https://doi.org/10.1007/s10994-022-06145-4}
}
\seealso{
\code{\link{ppc}}, \code{\link{phgs}}
}
\author{
Jireh Huang (\email{jirehhuang@ucla.edu})
}
