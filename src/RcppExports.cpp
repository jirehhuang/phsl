// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_has_path
bool cpp_has_path(int i, int j, SEXP amat, SEXP nodes);
RcppExport SEXP _phsl_cpp_has_path(SEXP iSEXP, SEXP jSEXP, SEXP amatSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< SEXP >::type amat(amatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_has_path(i, j, amat, nodes));
    return rcpp_result_gen;
END_RCPP
}
// deep_copy_NumericVector
void deep_copy_NumericVector(Rcpp::NumericVector& original, Rcpp::NumericVector& copy);
RcppExport SEXP _phsl_deep_copy_NumericVector(SEXP originalSEXP, SEXP copySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type original(originalSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type copy(copySEXP);
    deep_copy_NumericVector(original, copy);
    return R_NilValue;
END_RCPP
}
// vstruct_apply_cpp
Rcpp::IntegerMatrix vstruct_apply_cpp(Rcpp::IntegerMatrix undirMat, arma::mat& vs, Rcpp::CharacterVector nodes, int maxp, bool debug);
RcppExport SEXP _phsl_vstruct_apply_cpp(SEXP undirMatSEXP, SEXP vsSEXP, SEXP nodesSEXP, SEXP maxpSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type undirMat(undirMatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< int >::type maxp(maxpSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(vstruct_apply_cpp(undirMat, vs, nodes, maxp, debug));
    return rcpp_result_gen;
END_RCPP
}
// R_loglik_dnode
double R_loglik_dnode(SEXP target, SEXP parents, SEXP data, double k, int debuglevel);
RcppExport SEXP _phsl_R_loglik_dnode(SEXP targetSEXP, SEXP parentsSEXP, SEXP dataSEXP, SEXP kSEXP, SEXP debuglevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type target(targetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type parents(parentsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type debuglevel(debuglevelSEXP);
    rcpp_result_gen = Rcpp::wrap(R_loglik_dnode(target, parents, data, k, debuglevel));
    return rcpp_result_gen;
END_RCPP
}
// vstruct_apply_hgi
List vstruct_apply_hgi(Rcpp::IntegerMatrix undirMat, arma::vec& reference, Rcpp::CharacterVector& nodes, arma::mat& vs, SEXP data, arma::vec& delta, int reverse, int is_discrete, double k, int maxp, bool just_delta, bool debug);
RcppExport SEXP _phsl_vstruct_apply_hgi(SEXP undirMatSEXP, SEXP referenceSEXP, SEXP nodesSEXP, SEXP vsSEXP, SEXP dataSEXP, SEXP deltaSEXP, SEXP reverseSEXP, SEXP is_discreteSEXP, SEXP kSEXP, SEXP maxpSEXP, SEXP just_deltaSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type undirMat(undirMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type reverse(reverseSEXP);
    Rcpp::traits::input_parameter< int >::type is_discrete(is_discreteSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxp(maxpSEXP);
    Rcpp::traits::input_parameter< bool >::type just_delta(just_deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(vstruct_apply_hgi(undirMat, reference, nodes, vs, data, delta, reverse, is_discrete, k, maxp, just_delta, debug));
    return rcpp_result_gen;
END_RCPP
}
// pdag2dag_cpp
Rcpp::List pdag2dag_cpp(arma::umat g, SEXP nodes, bool direct_all);
RcppExport SEXP _phsl_pdag2dag_cpp(SEXP gSEXP, SEXP nodesSEXP, SEXP direct_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< bool >::type direct_all(direct_allSEXP);
    rcpp_result_gen = Rcpp::wrap(pdag2dag_cpp(g, nodes, direct_all));
    return rcpp_result_gen;
END_RCPP
}
// pdag2dag_greedy
arma::umat pdag2dag_greedy(arma::umat& a, Rcpp::IntegerMatrix& d, arma::vec& reference, Rcpp::CharacterVector& nodes, SEXP data, arma::vec& nscores, int is_discrete, double k, int maxp, bool verbose);
RcppExport SEXP _phsl_pdag2dag_greedy(SEXP aSEXP, SEXP dSEXP, SEXP referenceSEXP, SEXP nodesSEXP, SEXP dataSEXP, SEXP nscoresSEXP, SEXP is_discreteSEXP, SEXP kSEXP, SEXP maxpSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix& >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nscores(nscoresSEXP);
    Rcpp::traits::input_parameter< int >::type is_discrete(is_discreteSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type maxp(maxpSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pdag2dag_greedy(a, d, reference, nodes, data, nscores, is_discrete, k, maxp, verbose));
    return rcpp_result_gen;
END_RCPP
}
// apply_cpdag_rules
Rcpp::IntegerMatrix apply_cpdag_rules(arma::umat& pdag, Rcpp::CharacterVector& nodes, bool remove_invalid, bool debug);
RcppExport SEXP _phsl_apply_cpdag_rules(SEXP pdagSEXP, SEXP nodesSEXP, SEXP remove_invalidSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type pdag(pdagSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector& >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< bool >::type remove_invalid(remove_invalidSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(apply_cpdag_rules(pdag, nodes, remove_invalid, debug));
    return rcpp_result_gen;
END_RCPP
}
// normalize_muti
arma::sp_mat normalize_muti(arma::sp_mat muti, arma::vec entropy);
RcppExport SEXP _phsl_normalize_muti(SEXP mutiSEXP, SEXP entropySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type muti(mutiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type entropy(entropySEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_muti(muti, entropy));
    return rcpp_result_gen;
END_RCPP
}
// assign_small
arma::uvec assign_small(arma::mat D, arma::uvec group, arma::uvec ugroup, arma::uvec sgroup, double fraction, int linkage);
RcppExport SEXP _phsl_assign_small(SEXP DSEXP, SEXP groupSEXP, SEXP ugroupSEXP, SEXP sgroupSEXP, SEXP fractionSEXP, SEXP linkageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type group(groupSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ugroup(ugroupSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type sgroup(sgroupSEXP);
    Rcpp::traits::input_parameter< double >::type fraction(fractionSEXP);
    Rcpp::traits::input_parameter< int >::type linkage(linkageSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_small(D, group, ugroup, sgroup, fraction, linkage));
    return rcpp_result_gen;
END_RCPP
}
// vstruct_centered_on
arma::mat vstruct_centered_on(int x, arma::umat arcs, Rcpp::List dsep_set, double alpha, Rcpp::CharacterVector nodes, bool debug);
RcppExport SEXP _phsl_vstruct_centered_on(SEXP xSEXP, SEXP arcsSEXP, SEXP dsep_setSEXP, SEXP alphaSEXP, SEXP nodesSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type arcs(arcsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dsep_set(dsep_setSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(vstruct_centered_on(x, arcs, dsep_set, alpha, nodes, debug));
    return rcpp_result_gen;
END_RCPP
}
// vstruct_count_cpp
void vstruct_count_cpp(int p, Rcpp::IntegerVector& count, arma::mat& vs, bool debug);
RcppExport SEXP _phsl_vstruct_count_cpp(SEXP pSEXP, SEXP countSEXP, SEXP vsSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type count(countSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    vstruct_count_cpp(p, count, vs, debug);
    return R_NilValue;
END_RCPP
}
// vstructs_cpp
arma::umat vstructs_cpp(arma::umat& amat, arma::mat& vsmat, bool debug);
RcppExport SEXP _phsl_vstructs_cpp(SEXP amatSEXP, SEXP vsmatSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type amat(amatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type vsmat(vsmatSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(vstructs_cpp(amat, vsmat, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phsl_cpp_has_path", (DL_FUNC) &_phsl_cpp_has_path, 4},
    {"_phsl_deep_copy_NumericVector", (DL_FUNC) &_phsl_deep_copy_NumericVector, 2},
    {"_phsl_vstruct_apply_cpp", (DL_FUNC) &_phsl_vstruct_apply_cpp, 5},
    {"_phsl_R_loglik_dnode", (DL_FUNC) &_phsl_R_loglik_dnode, 5},
    {"_phsl_vstruct_apply_hgi", (DL_FUNC) &_phsl_vstruct_apply_hgi, 12},
    {"_phsl_pdag2dag_cpp", (DL_FUNC) &_phsl_pdag2dag_cpp, 3},
    {"_phsl_pdag2dag_greedy", (DL_FUNC) &_phsl_pdag2dag_greedy, 10},
    {"_phsl_apply_cpdag_rules", (DL_FUNC) &_phsl_apply_cpdag_rules, 4},
    {"_phsl_normalize_muti", (DL_FUNC) &_phsl_normalize_muti, 2},
    {"_phsl_assign_small", (DL_FUNC) &_phsl_assign_small, 6},
    {"_phsl_vstruct_centered_on", (DL_FUNC) &_phsl_vstruct_centered_on, 6},
    {"_phsl_vstruct_count_cpp", (DL_FUNC) &_phsl_vstruct_count_cpp, 4},
    {"_phsl_vstructs_cpp", (DL_FUNC) &_phsl_vstructs_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_phsl(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
