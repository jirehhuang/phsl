#include <RcppArmadillo.h>



/*
 * Rcpp version of utils::combn() with m = 2 and transposed for use in
 * vstruct_centered_on().
 */

arma::umat combn2t(arma::uvec InputVec){
  int n = InputVec.size();
  int nrow = n * (n-1) / 2;
  arma::umat OutputMat(nrow, 2);
  int start = 0;
  for (int i = 0; i < n; ++i){
    for (int j = i+1; j < n; ++j){
      OutputMat(start, 0) = InputVec(i);
      OutputMat(start, 1) = InputVec(j);
      ++start;
    }
  }
  return OutputMat;
}



/*
 * Find row index corresponding to an arc in a matrix generated by 
 * combn2t(). Drastically improves scalability as compared to which() 
 * for looking up arcs in node.pairs.
 */

int find_arc_index(arma::uvec arc, int nnodes){
  int x = arma::min(arc) + 1L;
  int y = arma::max(arc) + 1L;
  return ((x > 1L) * arma::sum(arma::regspace(nnodes-1L, nnodes-x+1L)) + (y-x)-1L);
}



/*
 * Key function converting from nodes to index.
 */

arma::uvec key_fun(Rcpp::CharacterVector set, Rcpp::CharacterVector nodes){
  return (Rcpp::as<arma::uvec>(Rcpp::match(set, nodes)) - 1L);
}



/*
 * Rcpp version of bnlearn:::is.listed() for use in vstruct_centered_on().
 */

bool is_listed(arma::umat& arcs, arma::uvec& yz){
  
  for (int i = 0; i < arcs.n_rows; i++){
    if ((yz(0) == arcs(i, 0) && yz(1) == arcs(i, 1)) ||
        (yz(0) == arcs(i, 1) && yz(1) == arcs(i, 0))){
      return true;
    }
  }
  return false;
}



/*
 * Detect v-structures centered on a given node.
 * 
 * This function is modeled after vstruct.centered.on() in 
 * bnlearn:::vstruct.detect(), but requires dsep_set = attr(mb, "dsep.set"). 
 * The intended improvement is primarily scalability achieved through 
 * key_fun().
 */

// [[Rcpp::export]]
arma::mat vstruct_centered_on(int x, 
                              arma::umat arcs, 
                              Rcpp::List dsep_set, 
                              double alpha, 
                              Rcpp::CharacterVector nodes, 
                              bool debug = false){
  arma::mat vs(0, 4);
  arma::vec insert_vs(4);
  if (debug){
    Rcpp::Rcout << "----------------------------------------------------------------\n";
    Rcpp::Rcout << "* v-structures centered on " << nodes[x] << ".\n";
  }
  arma::uvec tos = arcs.submat(arma::find(arcs.col(1) == x), arma::uvec(1, arma::fill::zeros));
  if (tos.size() < 2)
    return vs;
  arma::umat tos_combs = combn2t(tos);
  for (int j = 0; j < tos_combs.n_rows; j++){
    int y = tos_combs(j, 0);
    int z = tos_combs(j, 1);
    arma::uvec yz = tos_combs.row(j).t();
    if (debug)
      Rcpp::Rcout << "  * checking " << nodes[y] << " -> " << nodes[x] << " <- " << nodes[z] << "\n"; 
    int arc_index = find_arc_index(yz, nodes.size());
    Rcpp::List el = dsep_set[arc_index];
    double p_value = el[1];
    if (is_listed(arcs, yz) && p_value < alpha)
      continue;
    
    // assume dsep_set exists and blacklist does not
    // int arc_index = find_arc_index(yz, nodes.size());
    // Rcpp::List el = dsep_set[arc_index];
    Rcpp::CharacterVector el_dsep_set(0);
    if (! Rf_isNull(el[2]))
      el_dsep_set = el[2];
    arma::uvec el_dsep_ind = key_fun(el_dsep_set, nodes);
    arma::uvec isin = arma::find(el_dsep_ind == x);
    // Rcpp::Rcout << "arc_index = " << arc_index << ", x = " << x << ", el_dsep_ind = " << el_dsep_ind << "\n";
    if (! isin.size()){
      if (debug)
        Rcpp::Rcout << "    @ detected v-structure " << nodes[y] << " -> " << nodes[x] << " <- " << nodes[z] << " from d-separating set.\n";
      vs.insert_rows(vs.n_rows, 1); 
      // vs(vs.n_rows-1, 0) = el[1];
      vs(vs.n_rows-1, 0) = p_value;
      vs(vs.n_rows-1, 1) = y;
      vs(vs.n_rows-1, 2) = x;
      vs(vs.n_rows-1, 3) = z;
    }
  }
  return vs;
}



/*
 * Count v-structures centered on a given node.
 * 
 * The structure of this function is a stripped version of 
 * vstruct_apply_cpp(), which was modeled after bnlearn:::vstruct.apply()
 * (see bnsl.cpp). The intended usage is to count the number of detected
 * v-structures that are in agreement with each other by "applying"
 * all v-structures.
 */

// [[Rcpp::export]]
void vstruct_count_cpp(int p,  // Rcpp::IntegerMatrix& dirMat,
                       Rcpp::IntegerVector& count,
                       arma::mat& vs,
                       bool debug = false){
  
  arma::umat dirMat(p, p, arma::fill::zeros);
  
  double max_a;
  int y, x, z;
  
  if (debug)
    Rcpp::Rcout << "----------------------------------------------------------------\n";
  for (int i = 0; i < vs.n_rows; i++){
    
    max_a = vs(i, 0);
    y = vs(i, 1);
    x = vs(i, 2);
    z = vs(i, 3);
    
    dirMat(y, x)++;
    dirMat(z, x)++;
    
    if (debug)
      Rcpp::Rcout << "* counting v-structure " << y << " -> " << x << " <- " << z <<
        " (" << max_a << ")\n";
  }
  
  if (debug)
    Rcpp::Rcout << "----------------------------------------------------------------\n";
  for (int i = 0; i < vs.n_rows; i++){
    
    max_a = vs(i, 0);
    y = vs(i, 1);
    x = vs(i, 2);
    z = vs(i, 3);
    
    count(i) += dirMat(y, x);
    count(i) += dirMat(z, x);
    
    if (debug)
      Rcpp::Rcout << "* counting v-structure " << y << " -> " << x << " <- " << z <<
        " (" << max_a << ")\n";
  }
}



/*
 * Return v-structures in a graph.
 * 
 * This function is an Rcpp implementation of bnlearn::vstructs()
 * for use in vstructs_(). See vstructs.R for details.
 */

// [[Rcpp::export]]
arma::umat vstructs_cpp(arma::umat& amat,
                        arma::mat& vsmat,
                        bool debug = false){
  
  int p = amat.n_rows;
  
  arma::umat vs(arma::accu(amat), 3, arma::fill::zeros);
  int pos = 0;
  
  for (int i = 0; i < p; i++){
    
    if (debug)
      Rcpp::Rcout << "* looking at arcs pointing at node " << i << std::endl;
    
    for (int j = 0; j < p; j++){
      
      if (amat(j, i) == 1){
        
        if (debug)
          Rcpp::Rcout << "  > found arc " << j << " -> " << i << std::endl;
        
        for (int k = j + 1; k < p; k++){
          
          if (amat(k, i) == 1){
            
            if (debug)
              Rcpp::Rcout << "    > found a second arc " << k << " -> " << i << std::endl;
            
            if (amat(k, j) == 0 && amat(j, k) == 0){
              
              if (debug)
                Rcpp::Rcout << "    @ found unshielded collider " << j << " -> " << i << " <- " << k << std::endl;
              
              vsmat(j, i) = 1;
              vsmat(k, i) = 1;
              
              vs(pos, 0) = j;
              vs(pos, 1) = i;
              vs(pos, 2) = k;
              pos++;
              
              if (pos >= vs.n_rows){
                
                if (debug)
                  Rcpp::Rcout << "* adding more rows" << std::endl;
                
                vs.insert_rows(vs.n_rows, vs.n_rows);
              }
            }
          }
        }
      }
    }
  }
  vs.shed_rows(pos, vs.n_rows-1);
  return vs;
}



/*
 * vstruct_apply_cpp() requires bnlearn and can be found in bnsl.cpp.
 */